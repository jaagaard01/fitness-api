# source: http://localhost:4466
# timestamp: Fri Apr 05 2019 13:55:45 GMT-0600 (Mountain Daylight Time)

type AggregateLogs {
  count: Int!
}

type AggregateTemplate {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Logs implements Node {
  id: ID!
  name: String!
  bodyType: String!
  date: Int!
  weight: Int!
  reps: Int!
  author(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type LogsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LogsEdge]!
  aggregate: AggregateLogs!
}

input LogsCreateInput {
  name: String!
  bodyType: String!
  date: Int!
  weight: Int!
  reps: Int!
  author: UserCreateManyWithoutLogInput
}

input LogsCreateManyInput {
  create: [LogsCreateInput!]
  connect: [LogsWhereUniqueInput!]
}

input LogsCreateManyWithoutAuthorInput {
  create: [LogsCreateWithoutAuthorInput!]
  connect: [LogsWhereUniqueInput!]
}

input LogsCreateWithoutAuthorInput {
  name: String!
  bodyType: String!
  date: Int!
  weight: Int!
  reps: Int!
}

"""An edge in a connection."""
type LogsEdge {
  """The item at the end of the edge."""
  node: Logs!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LogsOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  bodyType_ASC
  bodyType_DESC
  date_ASC
  date_DESC
  weight_ASC
  weight_DESC
  reps_ASC
  reps_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LogsPreviousValues {
  id: ID!
  name: String!
  bodyType: String!
  date: Int!
  weight: Int!
  reps: Int!
}

type LogsSubscriptionPayload {
  mutation: MutationType!
  node: Logs
  updatedFields: [String!]
  previousValues: LogsPreviousValues
}

input LogsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LogsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LogsWhereInput
}

input LogsUpdateDataInput {
  name: String
  bodyType: String
  date: Int
  weight: Int
  reps: Int
  author: UserUpdateManyWithoutLogInput
}

input LogsUpdateInput {
  name: String
  bodyType: String
  date: Int
  weight: Int
  reps: Int
  author: UserUpdateManyWithoutLogInput
}

input LogsUpdateManyInput {
  create: [LogsCreateInput!]
  connect: [LogsWhereUniqueInput!]
  disconnect: [LogsWhereUniqueInput!]
  delete: [LogsWhereUniqueInput!]
  update: [LogsUpdateWithWhereUniqueNestedInput!]
  upsert: [LogsUpsertWithWhereUniqueNestedInput!]
}

input LogsUpdateManyWithoutAuthorInput {
  create: [LogsCreateWithoutAuthorInput!]
  connect: [LogsWhereUniqueInput!]
  disconnect: [LogsWhereUniqueInput!]
  delete: [LogsWhereUniqueInput!]
  update: [LogsUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [LogsUpsertWithWhereUniqueWithoutAuthorInput!]
}

input LogsUpdateWithoutAuthorDataInput {
  name: String
  bodyType: String
  date: Int
  weight: Int
  reps: Int
}

input LogsUpdateWithWhereUniqueNestedInput {
  where: LogsWhereUniqueInput!
  data: LogsUpdateDataInput!
}

input LogsUpdateWithWhereUniqueWithoutAuthorInput {
  where: LogsWhereUniqueInput!
  data: LogsUpdateWithoutAuthorDataInput!
}

input LogsUpsertWithWhereUniqueNestedInput {
  where: LogsWhereUniqueInput!
  update: LogsUpdateDataInput!
  create: LogsCreateInput!
}

input LogsUpsertWithWhereUniqueWithoutAuthorInput {
  where: LogsWhereUniqueInput!
  update: LogsUpdateWithoutAuthorDataInput!
  create: LogsCreateWithoutAuthorInput!
}

input LogsWhereInput {
  """Logical AND on all given filters."""
  AND: [LogsWhereInput!]

  """Logical OR on all given filters."""
  OR: [LogsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LogsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  bodyType: String

  """All values that are not equal to given value."""
  bodyType_not: String

  """All values that are contained in given list."""
  bodyType_in: [String!]

  """All values that are not contained in given list."""
  bodyType_not_in: [String!]

  """All values less than the given value."""
  bodyType_lt: String

  """All values less than or equal the given value."""
  bodyType_lte: String

  """All values greater than the given value."""
  bodyType_gt: String

  """All values greater than or equal the given value."""
  bodyType_gte: String

  """All values containing the given string."""
  bodyType_contains: String

  """All values not containing the given string."""
  bodyType_not_contains: String

  """All values starting with the given string."""
  bodyType_starts_with: String

  """All values not starting with the given string."""
  bodyType_not_starts_with: String

  """All values ending with the given string."""
  bodyType_ends_with: String

  """All values not ending with the given string."""
  bodyType_not_ends_with: String
  date: Int

  """All values that are not equal to given value."""
  date_not: Int

  """All values that are contained in given list."""
  date_in: [Int!]

  """All values that are not contained in given list."""
  date_not_in: [Int!]

  """All values less than the given value."""
  date_lt: Int

  """All values less than or equal the given value."""
  date_lte: Int

  """All values greater than the given value."""
  date_gt: Int

  """All values greater than or equal the given value."""
  date_gte: Int
  weight: Int

  """All values that are not equal to given value."""
  weight_not: Int

  """All values that are contained in given list."""
  weight_in: [Int!]

  """All values that are not contained in given list."""
  weight_not_in: [Int!]

  """All values less than the given value."""
  weight_lt: Int

  """All values less than or equal the given value."""
  weight_lte: Int

  """All values greater than the given value."""
  weight_gt: Int

  """All values greater than or equal the given value."""
  weight_gte: Int
  reps: Int

  """All values that are not equal to given value."""
  reps_not: Int

  """All values that are contained in given list."""
  reps_in: [Int!]

  """All values that are not contained in given list."""
  reps_not_in: [Int!]

  """All values less than the given value."""
  reps_lt: Int

  """All values less than or equal the given value."""
  reps_lte: Int

  """All values greater than the given value."""
  reps_gt: Int

  """All values greater than or equal the given value."""
  reps_gte: Int
  author_every: UserWhereInput
  author_some: UserWhereInput
  author_none: UserWhereInput
}

input LogsWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createTemplate(data: TemplateCreateInput!): Template!
  createLogs(data: LogsCreateInput!): Logs!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateTemplate(data: TemplateUpdateInput!, where: TemplateWhereUniqueInput!): Template
  updateLogs(data: LogsUpdateInput!, where: LogsWhereUniqueInput!): Logs
  deleteUser(where: UserWhereUniqueInput!): User
  deleteTemplate(where: TemplateWhereUniqueInput!): Template
  deleteLogs(where: LogsWhereUniqueInput!): Logs
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertTemplate(where: TemplateWhereUniqueInput!, create: TemplateCreateInput!, update: TemplateUpdateInput!): Template!
  upsertLogs(where: LogsWhereUniqueInput!, create: LogsCreateInput!, update: LogsUpdateInput!): Logs!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyTemplates(data: TemplateUpdateInput!, where: TemplateWhereInput): BatchPayload!
  updateManyLogses(data: LogsUpdateInput!, where: LogsWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyTemplates(where: TemplateWhereInput): BatchPayload!
  deleteManyLogses(where: LogsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  templates(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Template]!
  logses(where: LogsWhereInput, orderBy: LogsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Logs]!
  user(where: UserWhereUniqueInput!): User
  template(where: TemplateWhereUniqueInput!): Template
  logs(where: LogsWhereUniqueInput!): Logs
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  templatesConnection(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TemplateConnection!
  logsesConnection(where: LogsWhereInput, orderBy: LogsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LogsConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  template(where: TemplateSubscriptionWhereInput): TemplateSubscriptionPayload
  logs(where: LogsSubscriptionWhereInput): LogsSubscriptionPayload
}

type Template implements Node {
  id: ID!
  name: String!
  description: String
  logs(where: LogsWhereInput, orderBy: LogsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Logs!]
  bodyType: String!
  author(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

"""A connection to a list of items."""
type TemplateConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TemplateEdge]!
  aggregate: AggregateTemplate!
}

input TemplateCreateInput {
  name: String!
  description: String
  bodyType: String!
  logs: LogsCreateManyInput
  author: UserCreateManyWithoutTemplateInput
}

input TemplateCreateManyWithoutAuthorInput {
  create: [TemplateCreateWithoutAuthorInput!]
  connect: [TemplateWhereUniqueInput!]
}

input TemplateCreateWithoutAuthorInput {
  name: String!
  description: String
  bodyType: String!
  logs: LogsCreateManyInput
}

"""An edge in a connection."""
type TemplateEdge {
  """The item at the end of the edge."""
  node: Template!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TemplateOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  bodyType_ASC
  bodyType_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TemplatePreviousValues {
  id: ID!
  name: String!
  description: String
  bodyType: String!
}

type TemplateSubscriptionPayload {
  mutation: MutationType!
  node: Template
  updatedFields: [String!]
  previousValues: TemplatePreviousValues
}

input TemplateSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TemplateSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TemplateSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TemplateSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TemplateWhereInput
}

input TemplateUpdateInput {
  name: String
  description: String
  bodyType: String
  logs: LogsUpdateManyInput
  author: UserUpdateManyWithoutTemplateInput
}

input TemplateUpdateManyWithoutAuthorInput {
  create: [TemplateCreateWithoutAuthorInput!]
  connect: [TemplateWhereUniqueInput!]
  disconnect: [TemplateWhereUniqueInput!]
  delete: [TemplateWhereUniqueInput!]
  update: [TemplateUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [TemplateUpsertWithWhereUniqueWithoutAuthorInput!]
}

input TemplateUpdateWithoutAuthorDataInput {
  name: String
  description: String
  bodyType: String
  logs: LogsUpdateManyInput
}

input TemplateUpdateWithWhereUniqueWithoutAuthorInput {
  where: TemplateWhereUniqueInput!
  data: TemplateUpdateWithoutAuthorDataInput!
}

input TemplateUpsertWithWhereUniqueWithoutAuthorInput {
  where: TemplateWhereUniqueInput!
  update: TemplateUpdateWithoutAuthorDataInput!
  create: TemplateCreateWithoutAuthorInput!
}

input TemplateWhereInput {
  """Logical AND on all given filters."""
  AND: [TemplateWhereInput!]

  """Logical OR on all given filters."""
  OR: [TemplateWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TemplateWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  bodyType: String

  """All values that are not equal to given value."""
  bodyType_not: String

  """All values that are contained in given list."""
  bodyType_in: [String!]

  """All values that are not contained in given list."""
  bodyType_not_in: [String!]

  """All values less than the given value."""
  bodyType_lt: String

  """All values less than or equal the given value."""
  bodyType_lte: String

  """All values greater than the given value."""
  bodyType_gt: String

  """All values greater than or equal the given value."""
  bodyType_gte: String

  """All values containing the given string."""
  bodyType_contains: String

  """All values not containing the given string."""
  bodyType_not_contains: String

  """All values starting with the given string."""
  bodyType_starts_with: String

  """All values not starting with the given string."""
  bodyType_not_starts_with: String

  """All values ending with the given string."""
  bodyType_ends_with: String

  """All values not ending with the given string."""
  bodyType_not_ends_with: String
  logs_every: LogsWhereInput
  logs_some: LogsWhereInput
  logs_none: LogsWhereInput
  author_every: UserWhereInput
  author_some: UserWhereInput
  author_none: UserWhereInput
}

input TemplateWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  template(where: TemplateWhereInput, orderBy: TemplateOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Template!]
  log(where: LogsWhereInput, orderBy: LogsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Logs!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  template: TemplateCreateManyWithoutAuthorInput
  log: LogsCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutLogInput {
  create: [UserCreateWithoutLogInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTemplateInput {
  create: [UserCreateWithoutTemplateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutLogInput {
  firstName: String!
  lastName: String!
  template: TemplateCreateManyWithoutAuthorInput
}

input UserCreateWithoutTemplateInput {
  firstName: String!
  lastName: String!
  log: LogsCreateManyWithoutAuthorInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  template: TemplateUpdateManyWithoutAuthorInput
  log: LogsUpdateManyWithoutAuthorInput
}

input UserUpdateManyWithoutLogInput {
  create: [UserCreateWithoutLogInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutLogInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutLogInput!]
}

input UserUpdateManyWithoutTemplateInput {
  create: [UserCreateWithoutTemplateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTemplateInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTemplateInput!]
}

input UserUpdateWithoutLogDataInput {
  firstName: String
  lastName: String
  template: TemplateUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutTemplateDataInput {
  firstName: String
  lastName: String
  log: LogsUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutLogInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLogDataInput!
}

input UserUpdateWithWhereUniqueWithoutTemplateInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTemplateDataInput!
}

input UserUpsertWithWhereUniqueWithoutLogInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLogDataInput!
  create: UserCreateWithoutLogInput!
}

input UserUpsertWithWhereUniqueWithoutTemplateInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTemplateDataInput!
  create: UserCreateWithoutTemplateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  template_every: TemplateWhereInput
  template_some: TemplateWhereInput
  template_none: TemplateWhereInput
  log_every: LogsWhereInput
  log_some: LogsWhereInput
  log_none: LogsWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
